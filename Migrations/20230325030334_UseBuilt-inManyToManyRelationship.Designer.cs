// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealWorld.Infrastructure;

#nullable disable

namespace RealWorld.Migrations
{
    [DbContext(typeof(RealWorldContext))]
    [Migration("20230325030334_UseBuilt-inManyToManyRelationship")]
    partial class UseBuiltinManyToManyRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagsName")
                        .HasColumnType("TEXT");

                    b.HasKey("ArticlesId", "TagsName");

                    b.HasIndex("TagsName");

                    b.ToTable("ArticleTags", (string)null);
                });

            modelBuilder.Entity("ArticleUser", b =>
                {
                    b.Property<int>("FavoriteArticlesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FavoriteUsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FavoriteArticlesId", "FavoriteUsersId");

                    b.HasIndex("FavoriteUsersId");

                    b.ToTable("ArticleFavorites", (string)null);
                });

            modelBuilder.Entity("RealWorld.Domain.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("RealWorld.Domain.Tag", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Name = "HelloWorld"
                        },
                        new
                        {
                            Name = "lsopaslkj"
                        },
                        new
                        {
                            Name = "HoangTheTrung"
                        },
                        new
                        {
                            Name = "hocChoGioi"
                        },
                        new
                        {
                            Name = "LonRoiConHayKhocNhe"
                        },
                        new
                        {
                            Name = "ChauLenBa"
                        });
                });

            modelBuilder.Entity("RealWorld.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "",
                            Email = "wanbicoi123@gmail.com",
                            Hash = new byte[] { 220, 228, 130, 131, 167, 129, 194, 186, 39, 200, 224, 139, 154, 143, 200, 164, 97, 4, 202, 134, 195, 119, 45, 236, 93, 166, 232, 37, 95, 220, 36, 160, 159, 183, 74, 22, 40, 62, 177, 100, 233, 58, 171, 65, 108, 255, 16, 30, 47, 77, 63, 9, 66, 95, 250, 62, 61, 6, 177, 28, 38, 125, 251, 213 },
                            Image = "",
                            Salt = new byte[] { 220, 148, 217, 179, 184, 255, 22, 75, 135, 105, 21, 40, 161, 16, 164, 199 },
                            UserName = "Victor"
                        });
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.HasOne("RealWorld.Domain.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealWorld.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticleUser", b =>
                {
                    b.HasOne("RealWorld.Domain.Article", null)
                        .WithMany()
                        .HasForeignKey("FavoriteArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealWorld.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("FavoriteUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealWorld.Domain.Article", b =>
                {
                    b.HasOne("RealWorld.Domain.User", "Author")
                        .WithMany("CreatedArticles")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("RealWorld.Domain.User", b =>
                {
                    b.Navigation("CreatedArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
